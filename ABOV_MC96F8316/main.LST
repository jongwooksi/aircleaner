C51 COMPILER V9.60.0.0   MAIN                                                              07/31/2021 15:44:31 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //======================================================
   2          // Main program routine
   3          // - Device name  : MC96F8316
   4          // - Package type : 28SOP
   5          //======================================================
   6          // For XDATA variable : V1.041.00 ~
   7          #define   MAIN  1
   8          
   9          // Generated    : Tue, Jul 27, 2021 (11:47:04)
  10          #include  "MC96F8316.h"
  11          #include  "func_def.h"
  12          #include <stdio.h>
  13          #include <string.h>
  14          
  15          
  16          #define PWM0_FLAG   0x01
  17          #define PWM1_FLAG   0x02
  18          #define PWM2_FLAG   0x04
  19          #define PWM3_FLAG   0x08
  20          
  21          #define PWM_CTL_OFF   0
  22          #define PWM_CTL_INC   1
  23          #define PWM_CTL_DEC   2
  24          
  25          #define PWM_CH_NUM    4
  26          
  27          //======================================================
  28          // interrupt routines
  29          //======================================================
  30          
  31          //======================================================
  32          // peripheral setting routines
  33          //======================================================
  34          
  35          
  36          typedef struct _tagPWMINFO {
  37            int   period;
  38            int   duty;
  39            int   default_duty;
  40            int   next_duty;
  41            int   count;
  42            int   out;
  43          } PWMINFO;
  44          
  45          
  46          
  47          static unsigned int _pwm_ctl_dec_flag = 0;
  48          static unsigned int _pwm_ctl_inc_flag = 0;
  49          static unsigned int _pwm_ctl_cnt = 0;
  50          
  51          static unsigned int _pwm_flag_list[PWM_CH_NUM] = { PWM0_FLAG, PWM1_FLAG, PWM2_FLAG, PWM3_FLAG };
  52          
  53          
  54          
  55          // ----------------------------------
C51 COMPILER V9.60.0.0   MAIN                                                              07/31/2021 15:44:31 PAGE 2   

  56          static int _pwm_mask = 0x0f;  // Enable Mask : - - - - PWM3 PWM2 PWM1 PWM0
  57          PWMINFO   _pwm[PWM_CH_NUM];
  58          
  59          
  60          static char _pwm_out;
  61          static char pin15;
  62          
  63          
  64          void UART1_Clear()
  65          {
  66   1        UARTDR = 0xFF;
  67   1      }
  68          
  69          
  70          
  71          void pwm_setup( PWMINFO *pwm, int period, int duty )
  72          {
  73   1        pwm->period     = period;
  74   1        pwm->duty       = duty;
  75   1        pwm->next_duty    = duty;
  76   1        pwm->default_duty = duty;
  77   1        pwm->count    = 0;
  78   1        pwm->out    = 0;
  79   1      }
  80          
  81          
  82          void pwm_init()
  83          {
  84   1      
  85   1        pwm_setup( &_pwm[0], 10, 0 ); // 35
  86   1        pwm_setup( &_pwm[1], 12, 4 ); // 11
  87   1        pwm_setup( &_pwm[2], 12, 8 ); // 12
  88   1        pwm_setup( &_pwm[3], 12, 12 ); // 13
  89   1      
  90   1      }
  91          
  92          void pwm_setup_control( unsigned int pwmflag, unsigned int ctl )
  93          {
  94   1        if( ctl == PWM_CTL_OFF ) 
  95   1        {
  96   2          _pwm_ctl_inc_flag &= ~pwmflag;
  97   2          _pwm_ctl_dec_flag &= ~pwmflag;
  98   2        }
  99   1        else if( ctl == PWM_CTL_DEC ) 
 100   1        {
 101   2          _pwm_ctl_dec_flag |=  pwmflag;
 102   2          _pwm_ctl_inc_flag &= ~pwmflag;
 103   2        }
 104   1        else 
 105   1        {
 106   2          _pwm_ctl_dec_flag &= ~pwmflag;
 107   2          _pwm_ctl_inc_flag |=  pwmflag;
 108   2        }
 109   1      }
 110          
 111          
 112          //======================================================
 113          static char _pwm_out_motor;
 114          
 115          void pwm_control_Motor()
 116          {
 117   1        _pwm_out_motor = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              07/31/2021 15:44:31 PAGE 3   

 118   1        // PWM Motor
 119   1        if( _pwm[0].count < _pwm[0].duty && (_pwm_mask & PWM0_FLAG) ) {
 120   2          _pwm_out_motor |= 0x20; // P35
 121   2          P3 |= _pwm_out_motor;
 122   2        }
 123   1      
 124   1        else
 125   1        {
 126   2          P3 &= 0xDF;
 127   2        }
 128   1        
 129   1        _pwm[0].count++;
 130   1      
 131   1        
 132   1        if( _pwm[0].count >= _pwm[0].period ) {
 133   2          _pwm[0].count = 0;
 134   2          _pwm[0].duty  = _pwm[0].next_duty;
 135   2          
 136   2        }
 137   1        
 138   1      
 139   1      }
 140          
 141          
 142          void pwm_control_LED()
 143          {
 144   1      
 145   1        _pwm_out = 0;
 146   1        
 147   1        // PWM 1
 148   1        if( _pwm[1].count < _pwm[1].duty && (_pwm_mask & PWM1_FLAG) ) {
 149   2          _pwm_out |= 0x02; // P11
 150   2        }
 151   1      
 152   1        _pwm[1].count++;
 153   1      
 154   1        if( _pwm[1].count >= _pwm[1].period ) {
 155   2          _pwm[1].count = 0;
 156   2          _pwm[1].duty  = _pwm[1].next_duty;
 157   2        }
 158   1      
 159   1      
 160   1        // PWM 2
 161   1        if( _pwm[2].count < _pwm[2].duty && (_pwm_mask & PWM2_FLAG) ) {
 162   2          if( _pwm[2].count >= 4)
 163   2            _pwm_out |= 0x04; // P12
 164   2        }
 165   1      
 166   1        _pwm[2].count++;
 167   1      
 168   1        if( _pwm[2].count >= _pwm[2].period ) {
 169   2          _pwm[2].count = 0;
 170   2          _pwm[2].duty  = _pwm[2].next_duty;
 171   2        }
 172   1      
 173   1      
 174   1        // PWM 3
 175   1        if( _pwm[3].count < _pwm[3].duty && (_pwm_mask & PWM3_FLAG) ) {
 176   2          if( _pwm[3].count >= 8)
 177   2            _pwm_out |= 0x08; // P13
 178   2        }
 179   1      
C51 COMPILER V9.60.0.0   MAIN                                                              07/31/2021 15:44:31 PAGE 4   

 180   1        _pwm[3].count++;
 181   1      
 182   1        
 183   1        if( _pwm[3].count >= _pwm[3].period ) {
 184   2          _pwm[3].count = 0;
 185   2          _pwm[3].duty  = _pwm[3].next_duty;
 186   2        }
 187   1      
 188   1        
 189   1        
 190   1        
 191   1        _pwm_out |= 0xF1; // init p10 
 192   1        pin15 = P1 & 0xF0;
 193   1        
 194   1        P1 = ( pin15 | ~_pwm_out);
 195   1      
 196   1        
 197   1        /*
 198   1          ex) pin 13, 12 high, 11 low 00001100
 199   1               _pwm_out = 0b11111101
 200   1              ~_pwm_out = 0b00000010
 201   1              
 202   1              if P15 low:
 203   1               pin 15 = 0b00100000
 204   1               P1     = 0b00100010
 205   1        
 206   1              else (P15 high):
 207   1               pin 15 = 0b00000000
 208   1               P1 = 0b00000010  
 209   1        
 210   1        */
 211   1        
 212   1      }
 213          
 214          
 215          
 216          void pwm_enable( int pwm0, int pwm1, int pwm2, int pwm3 )
 217          {
 218   1        // 0:Disable 1:Enable -1:Don't care(not change)
 219   1      
 220   1        // B/G/R/Motor
 221   1        if( pwm0 != -1 ) { if( pwm0 ) _pwm_mask |= PWM0_FLAG; else _pwm_mask &= ~PWM0_FLAG; }
 222   1        if( pwm1 != -1 ) { if( pwm1 ) _pwm_mask |= PWM1_FLAG; else _pwm_mask &= ~PWM1_FLAG; }
 223   1        if( pwm2 != -1 ) { if( pwm2 ) _pwm_mask |= PWM2_FLAG; else _pwm_mask &= ~PWM2_FLAG; }
 224   1        if( pwm3 != -1 ) { if( pwm3 ) _pwm_mask |= PWM3_FLAG; else _pwm_mask &= ~PWM3_FLAG; }
 225   1      }
 226          
 227          
 228          //======================================================
 229          void setupOpMode()
 230          {
 231   1        pwm_setup_control( PWM0_FLAG, PWM_CTL_OFF );
 232   1        pwm_setup_control( PWM1_FLAG, PWM_CTL_OFF );
 233   1        pwm_setup_control( PWM2_FLAG, PWM_CTL_OFF );
 234   1        pwm_setup_control( PWM3_FLAG, PWM_CTL_OFF );
 235   1      
 236   1      }
 237          
 238          
 239          void setMotorPWM()
 240          { 
 241   1      
C51 COMPILER V9.60.0.0   MAIN                                                              07/31/2021 15:44:31 PAGE 5   

 242   1        if((UARTDR & 0x0F)== 0x00)
 243   1        {
 244   2          P1 &= 0x0F;
 245   2          pwm_enable(0, -1, -1, -1);
 246   2          pwm_setup( &_pwm[0], 10, 0 );
 247   2          UART1_Clear();
 248   2        }
 249   1        
 250   1        else
 251   1        {
 252   2          pwm_enable( 1, -1,-1,-1 );
 253   2          P1 |= 0x20;
 254   2      
 255   2          if((UARTDR & 0x0F) == 0x01) { pwm_setup( &_pwm[0], 10, 6 );}
 256   2          else if((UARTDR & 0x0F) == 0x02) { pwm_setup( &_pwm[0], 10, 7 );}
 257   2          else if((UARTDR & 0x0F) == 0x03) { pwm_setup( &_pwm[0], 10, 8 );}
 258   2          else if((UARTDR & 0x0F) == 0x04) { pwm_setup( &_pwm[0], 10, 9 );}
 259   2          else if((UARTDR & 0x0F) == 0x05) { pwm_setup( &_pwm[0], 10, 10 );}
 260   2      
 261   2          UART1_Clear();
 262   2        }
 263   1        
 264   1      }
 265          
 266          void setLedPWM(int color) { 
 267   1        
 268   1        /* 
 269   1          B : On
 270   1          G : Good
 271   1          Y : So So
 272   1          M : Bad
 273   1          R : very Bad
 274   1        
 275   1        */
 276   1      
 277   1        if(color == 0){ // B : on
 278   2          pwm_enable(-1, 1, 1, 0);
 279   2          pwm_setup_control( PWM1_FLAG, PWM_CTL_DEC );
 280   2          pwm_setup_control( PWM2_FLAG, PWM_CTL_DEC );
 281   2          pwm_setup_control( PWM3_FLAG, PWM_CTL_INC );
 282   2          UART1_Clear();
 283   2        }
 284   1        
 285   1        else if(color == 1){ // G : Good
 286   2          pwm_enable(-1, 1, 0, 1);
 287   2          pwm_setup_control( PWM1_FLAG, PWM_CTL_DEC );
 288   2          pwm_setup_control( PWM2_FLAG, PWM_CTL_INC );
 289   2          pwm_setup_control( PWM3_FLAG, PWM_CTL_DEC );
 290   2          UART1_Clear();
 291   2        }
 292   1          
 293   1        else if(color == 2){ // Y : So So
 294   2          pwm_enable(-1, 0, 0, 1);
 295   2          pwm_setup_control( PWM1_FLAG, PWM_CTL_INC );
 296   2          pwm_setup_control( PWM2_FLAG, PWM_CTL_INC );
 297   2          pwm_setup_control( PWM3_FLAG, PWM_CTL_DEC );
 298   2          UART1_Clear();
 299   2        }
 300   1      
 301   1        
 302   1        else if(color == 3){ // M : Bad
 303   2          pwm_enable(-1, 0, 1, 0);
C51 COMPILER V9.60.0.0   MAIN                                                              07/31/2021 15:44:31 PAGE 6   

 304   2          pwm_setup_control( PWM1_FLAG, PWM_CTL_INC );
 305   2          pwm_setup_control( PWM2_FLAG, PWM_CTL_DEC );
 306   2          pwm_setup_control( PWM3_FLAG, PWM_CTL_INC );
 307   2          UART1_Clear();
 308   2        }
 309   1      
 310   1        else if(color == 4){ // R : very Bad
 311   2          pwm_enable(-1, 0, 1, 1);
 312   2          pwm_setup_control( PWM1_FLAG, PWM_CTL_INC );
 313   2          pwm_setup_control( PWM2_FLAG, PWM_CTL_DEC );
 314   2          pwm_setup_control( PWM3_FLAG, PWM_CTL_DEC );
 315   2          UART1_Clear();
 316   2        }
 317   1      
 318   1        
 319   1      }
 320          
 321          /*
 322          void setRelayCtrl(int color) {
 323            
 324          }
 325          
 326          */
 327          
 328          void UART_init()
 329          {
 330   1        // initialize UART interface
 331   1        // ASync. 9615bps N 8 1
 332   1        UARTCR2 = 0x02;   // activate UART
 333   1        UARTCR1 = 0x06;   // bit count, parity
 334   1        UARTCR2 |= 0x0D;  // interrupt, speed
 335   1        UARTCR3 = 0x00;   // stop bit
 336   1        UARTBD = 0x0C;    // baud rate
 337   1        UARTST=0x60;    //UDRE TXC RXC WAKE SOFTRST DOR FE PE 
 338   1        // 0x40
 339   1      }
 340          
 341          
 342          
 343          void clock_init()
 344          {
 345   1        // internal RC clock (1.000000MHz)
 346   1        // Nothing to do for the default clock
 347   1      }
 348          
 349          void port_init()
 350          {
 351   1        // initialize ports
 352   1        //   4 : P35      out 
 353   1        //   8 : RXD      in  
 354   1        //   9 : TXD      out 
 355   1        //  10 : P25      in  
 356   1        //  11 : P24      out 
 357   1        //  20 : P13      out 
 358   1        //  21 : P12      out 
 359   1        //  22 : P11      out 
 360   1        P0IO = 0xFF;      // direction
 361   1        P0PU = 0x00;      // pullup
 362   1        P0OD = 0x00;      // open drain
 363   1        P03DB = 0x00;     // bit7~6(debounce clock), bit5~0=P35,P06~02 debounce
 364   1        P0   = 0x00;      // port initial value
 365   1      
C51 COMPILER V9.60.0.0   MAIN                                                              07/31/2021 15:44:31 PAGE 7   

 366   1        P1IO = 0xFF;      // direction
 367   1        P1PU = 0x00;      // pullup
 368   1        P1OD = 0x00;      // open drain
 369   1        P12DB = 0x00;     // debounce : P23~20, P13~10
 370   1        P1   = 0x00;      // port initial value
 371   1      
 372   1        P2IO = 0xDF;      // direction
 373   1        P2PU = 0x00;      // pullup
 374   1        P2OD = 0x00;      // open drain
 375   1        P2   = 0x00;      // port initial value
 376   1      
 377   1        P3IO = 0xFD;      // direction
 378   1        P3PU = 0x00;      // pullup
 379   1        P3OD = 0x00;      // open drain
 380   1        P3   = 0x00;      // port initial value
 381   1      
 382   1        // Set port functions
 383   1        P0FSR = 0x00;     // P0 selection
 384   1        P1FSRH = 0x00;    // P1 selection High
 385   1        P1FSRL = 0x00;    // P1 selection Low
 386   1        P2FSR = 0x00;     // P2 selection
 387   1        P3FSR = 0x01;     // P3 selection
 388   1      }
 389          
 390          static unsigned int _COLOR_LOOP_INDEX = 0;
 391            
 392          void main()
 393          {
 394   1        //int i;
 395   1        
 396   1        cli();            // disable INT. during peripheral setting
 397   1        port_init();      // initialize ports
 398   1        clock_init();     // initialize operation clock
 399   1        UART_init();      // initialize UART interface
 400   1        pwm_enable( 0, 1, 1, 1 ); // Motor/ R/ G/ B 
 401   1        pwm_init();
 402   1        pwm_control_Motor();
 403   1        pwm_control_LED();
 404   1        sei();            // enable INT.
 405   1      
 406   1      
 407   1        // TODO: add your main code here
 408   1        UARTDR = 0xFF;
 409   1        
 410   1        setupOpMode();
 411   1        
 412   1        while(1)
 413   1        { 
 414   2          
 415   2          if ((UARTDR & 0x0F) < 0x06)
 416   2            setMotorPWM();    
 417   2      
 418   2          /*
 419   2          F0 : Motor Power On
 420   2          F1 : Motor Power 1
 421   2          F2 : Motor Power 2
 422   2          F3 : Motor Power 3
 423   2          F4 : Motor Power 4
 424   2          F5 : Motor Power 5 (Max)
 425   2          */
 426   2          
 427   2          if (((UARTDR & 0xF0) >> 4) < 0x05)
C51 COMPILER V9.60.0.0   MAIN                                                              07/31/2021 15:44:31 PAGE 8   

 428   2          {
 429   3            switch ((UARTDR & 0xF0) >> 4)
 430   3            {
 431   4              case 0x00: 
 432   4                setLedPWM(0); 
 433   4                break;
 434   4              case 0x01: 
 435   4                setLedPWM(1);
 436   4                break;
 437   4              case 0x02: 
 438   4                setLedPWM(2);
 439   4                break;
 440   4              case 0x03: 
 441   4                setLedPWM(3);
 442   4                break;
 443   4              case 0x04:
 444   4                setLedPWM(4);
 445   4                break;
 446   4      
 447   4            }
 448   3          }
 449   2          
 450   2          pwm_control_Motor();
 451   2          pwm_control_LED();
 452   2          
 453   2          /*
 454   2          0F : LED Power On
 455   2          1F : Dust Good
 456   2          2F : Dust So So
 457   2          3F : Dust Bad
 458   2          4F : Dust Very Bad  (Max)
 459   2          */
 460   2          
 461   2          
 462   2          /*
 463   2          for(i = 0; i < 1000; i++) _nop_();  // init delay
 464   2      
 465   2          switch (_COLOR_LOOP_INDEX)
 466   2          {
 467   2            case 0:
 468   2              setLedPWM(0);
 469   2              _COLOR_LOOP_INDEX++;
 470   2              break;
 471   2            
 472   2            case 1:
 473   2              setLedPWM(1);
 474   2              _COLOR_LOOP_INDEX++;
 475   2              break;
 476   2            
 477   2            case 2:
 478   2              setLedPWM(2);
 479   2              _COLOR_LOOP_INDEX++;
 480   2              break;
 481   2            
 482   2            case 3:
 483   2              setLedPWM(3);
 484   2              _COLOR_LOOP_INDEX++;
 485   2              break;
 486   2            
 487   2            case 4:
 488   2              setLedPWM(4);
 489   2              _COLOR_LOOP_INDEX++;
C51 COMPILER V9.60.0.0   MAIN                                                              07/31/2021 15:44:31 PAGE 9   

 490   2              break;
 491   2                
 492   2          }
 493   2          if (_COLOR_LOOP_INDEX == 4)
 494   2            _COLOR_LOOP_INDEX = 0;
 495   2          
 496   2          
 497   2          for (i= 0; i < 10; i++)
 498   2          {
 499   2            pwm_control_Motor();
 500   2            pwm_control_LED();
 501   2          }
 502   2          
 503   2          */
 504   2          
 505   2          
 506   2        }
 507   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1448    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     69      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
